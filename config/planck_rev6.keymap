#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_48keys.h"

/* layer IDs */ 

#define DEF 0  // layer shortcuts, must match order in which they are defined below
#define NUM 1
#define NAV 2
#define MED 3

/* key aliases */

#define ___ &trans
#define MEH LC(LA(LSHFT))
   
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5 // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 // right-hand keys
#define THUMBS LH3 LH2 LH1 RH1 RH2 RH3      


ZMK_BEHAVIOR(hml, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <125>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
)

ZMK_BEHAVIOR(hmr, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <125>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
)    
    


// tap: sticky shift | double tap: capsword
// ZMK_BEHAVIOR(ss_cw, tap_dance,
//     tapping-term-ms = <200>;
//     bindings = <&sk LSHFT>, <&caps_word>;
// )

// // tap: backspace | shift + tap: delete | hold: num layer
// ZMK_BEHAVIOR(bs_del_num, mod_morph,
//     bindings = <&lt NUM BSPC>, <&kp DEL>;
//     mods = <(MOD_LSFT|MOD_RSFT)>;
// )

// // windows sleep macro
// ZMK_BEHAVIOR(win_sleep, macro,
//     wait-ms = <100>;
//     tap-ms = <5>;
//     bindings = <&kp LG(X) &kp U &kp S>;
// )

// combos
#undef COMBO_TERM
#define COMBO_TERM 30  // default 30ms

ZMK_COMBO(combo_lbrc, &kp LBRC, LB3, LB2, ALL) 
ZMK_COMBO(combo_rbrc, &kp RBRC, LB2, LB1, ALL) 

/* keymap */

ZMK_LAYER(default_layer,
    &kp GRAVE   &kp Q       &kp W       &kp F       &kp P         &kp B     &kp J         &kp L          &kp U        &kp Y       &kp SEMI     &kp BSPC
    &mt MEH ESC &hml LCTL A &hml LALT R &hml LCMD S &hml LSHFT T  &kp G     &kp M         &hmr RSHFT N   &hmr LCMD E  &hmr LALT I &hmr LCTRL O &kp SQT
    &kp LSHFT   &kp Z       &kp X       &kp C       &kp D         &kp V     &kp K         &kp H          &kp COMMA    &kp DOT     &kp SLASH    &mt LSHFT ENTER
    ___         ___         ___         &kp TAB     &lt NUM SPACE &kp ESC   &lt NAV GRAVE &mt LSHFT BSPC &lt MED ENTER ___         ___          ___
)

ZMK_LAYER(num_layer,
    &kp TAB    &kp EXCL  &kp AT    &kp HASH    &kp UNDER   &kp LPAR  &kp RPAR  &kp N7    &kp N8       &kp N9      &kp COLON     &kp AMPS
    &kp GRAVE  &kp LCTRL &kp LALT  &kp LCMD    &kp LSHFT   &kp LBRC  &kp RBRC  &kp N4    &kp N5       &kp N6      &kp N0        &kp PLUS
    &kp GT     &kp BSLH  &kp LBKT  &kp RBKT    &kp MINUS   &kp EQUAL &kp COLON &kp N1    &kp N2       &kp N3      &kp SLASH     &kp ENTER
    ___        ___       ___       &kp MINUS   ___         &kp LT    &kp N0    ___       &kp DOT      ___         ___           ___
)

ZMK_LAYER(nav_layer,
    ___        ___         ___         ___         ___           ___       ___    &kp HOME     &kp PG_DN     &kp PG_UP     &kp END      ___
    &caps_word &kp LCTRL   &kp LALT    &kp LCMD    &kp LSHFT     ___       ___    &kp LEFT     &kp DOWN      &kp UP        &kp RIGHT    ___
    &kp CAPS   &kp LG(Z)   &kp LG(X)   &kp LG(C)   &kp LG(V)     &kp LG(V) ___    &kp LG(LBRC) &kp LG(MINUS) &kp LG(EQUAL) &kp LG(RBRC) ___
    ___        ___         ___         &kp TAB     &kp SPACE     ___       ___    ___          ___           ___           ___          ___
)

ZMK_LAYER(med_layer,
    ___        &kp C_PP    ___         &kp C_STOP   &kp C_PLAY    ___       ___           &kp C_PREV   &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT   ___
    ___        ___         &kp C_PREV  &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT ___           &kp LSHFT    &kp LCMD     &kp LALT     &kp LCTRL    ___ 
    ___        ___         ___         ___          ___           ___       ___           &kp C_PP     &kp C_VOL_DN &kp C_VOL_UP &kp C_PP     ___
    ___        ___         ___         ___          ___           ___       ___           ___          ___          ___         ___          ___
)

