#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_48keys.h"
#include "mouse.dtsi"

/* layer IDs */ 

#define DEF 0  // layer shortcuts, must match order in which they are defined below
#define NUM 1
#define SYM 2
#define NAV 3
#define PTR 4

#define QUICK_TAP_MS 175
#define TAPPING_TERM_MS 220
#define PRIOR_IDLE_MS 150

/* key aliases */

#define ___ &trans
   
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5 
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 
#define THUMBS LH3 LH2 LH1 RH1 RH2 RH3      

#define MEH LC(LA(LSHFT))

#define SFT_ENT &mt LSHFT ENTER
// #define SFT_BSP &mt LSHFT BSPC
#define SFT_BSP &th_ht LSHFT BSPC

#define NAV_KEY &mo NAV 
#define SPC_NUM &lt NUM SPACE

#define ESC_MEH &mt MEH ESC
#define ESC_SYM &lt  SYM ESC
#define PTR_LCK &tog PTR

#define SQT_MEH &mt MEH SQT
#define CMD_TAB &mt LCMD TAB

#define ZOOM_IN  &kp LG(EQUAL)
#define ZOOM_OUT &kp LG(MINUS)
#define FORWARD  &kp LG(LBRC)
#define BACK     &kp LG(RBRC)

#define U_UNDO  &kp LG(Z)
#define U_CUT   &kp LG(X)
#define U_COPY  &kp LG(C)
#define U_PASTE &kp LG(V)

#define EMDASH &kp LA(MINUS)

#define HML_A &hml LCTRL A
#define HML_R &hml LALT  R
#define HML_S &hml LCMD  S
#define HML_T &hml LSHFT T

#define HMR_N &hmr LSHFT N
#define HMR_E &hmr LCMD  E
#define HMR_I &hmr LALT  I
#define HMR_O &hmr LCTRL O

/* karabiner tokens */
#define DICTATION &kp F21
#define APPLE_FN  &kp F24

ZMK_BEHAVIOR(hml, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;
    require-prior-idle-ms = <PRIOR_IDLE_MS>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;
)

ZMK_BEHAVIOR(hmr, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;
    require-prior-idle-ms = <PRIOR_IDLE_MS>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;
)

ZMK_BEHAVIOR(th_ht, hold_tap, 
    flavor = "hold-preferred";
    tapping-term-ms = <200>;
    bindings = <&kp>, <&kp>;
)

ZMK_BEHAVIOR(semi_quote, tap_dance,
    tapping-term-ms = <QUICK_TAP_MS>;
    bindings = <&kp SEMI>,<&kp SQT>;
)

ZMK_BEHAVIOR(magic_sft, tap_dance,
    tapping-term-ms = <QUICK_TAP_MS>;
    bindings = <&kp LSHFT>,<&caps_word>;
)
   
ZMK_COMBO(combo_bs_word, &kp LA(BSPC), RM1 RM2, ALL)
ZMK_COMBO(combo_del, &kp DEL, RT3 RT4, ALL)
ZMK_COMBO(combo_ent, &kp ENTER, RM3 RM4, ALL)
ZMK_COMBO(combo_esc, &kp ESC, LM3 LM4, ALL)
ZMK_COMBO(combo_ptr_lock, &tog PTR, RT2 RM1 RM3, ALL)

ZMK_COMBO(combo_bracket_l, &kp LBKT, LB3 LB2, ALL)
ZMK_COMBO(combo_bracket_r, &kp RBKT, LB2 LB1, ALL)
ZMK_COMBO(combo_paren_l, &kp LPAR, LT3 LT2, ALL)
ZMK_COMBO(combo_paren_r, &kp RPAR, LT2 LT1, ALL)

ZMK_COMBO(combo_meh_l, &kp MEH, LB4 LB3, ALL)
ZMK_COMBO(combo_meh_r, &kp MEH, RB4 RB3, ALL)

/* keycodes */
/*                                      48 KEY MATRIX / LAYOUT MAPPING

  ╭────────────────────────┬────────────────────────╮ ╭─────────────────────────┬─────────────────────────╮
  │  0   1   2   3   4   5 │  6   7   8   9  10  11 │ │ LT5 LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 RT5 │
  │ 12  13  14  15  16  17 │ 18  19  20  21  22  23 │ │ LM5 LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 RM5 │
  │ 24  25  26  27  28  29 │ 30  31  32  33  34  35 │ │ LB5 LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 RB5 │
  │ 36  37  38  39  40  41 │ 42  43  44  45  46  47 │ │ LH5 LH4 LH3 LH2 LH1 LH0 │ RH0 RH1 RH2 RH3 RH4 RH5 │
  ╰────────────────────────┴────────────────────────╯ ╰─────────────────────────┴─────────────────────────╯ */


ZMK_LAYER(default_layer,
    &kp GRAVE  &kp Q &kp W   &kp F   &kp P   &kp B   &kp J   &kp L   &kp U     &kp Y   &semi_quote  ___
    ESC_MEH    HML_A HML_R   HML_S   HML_T   &kp G   &kp M   HMR_N   HMR_E     HMR_I   HMR_O        &kp SQT
    &magic_sft &kp Z &kp X   &kp C   &kp D   &kp V   &kp K   &kp H   &kp COMMA &kp DOT &kp SLASH    SFT_ENT
    ___        ___   ___     CMD_TAB SPC_NUM ESC_SYM NAV_KEY SFT_BSP &kp ENTER ___     ___          ___
)


ZMK_LAYER(num_layer,
    ___ &kp F1  &kp F2  &kp F3  &kp F4  &kp  F5  &kp F6  &kp N7 &kp N8 &kp N9  &kp COLON ___
    ___ &kp F7  &kp F8  &kp F9  &kp F10 &kp F11  &kp F12 &kp N4 &kp N5 &kp N6  &kp N0    &kp PLUS
    ___ ___     ___     ___     ___     ___      ___     &kp N1 &kp N2 &kp N3  &kp SLASH &kp ENTER
    ___ ___     ___     ___     ___     ___      ___     &kp N0 ___    &kp DOT ___       ___
)

ZMK_LAYER(sym_layer,
    ___ &kp EXCL &kp AT    &kp HASH  &kp STAR  &kp GRAVE  ___       &kp DQT &kp LPAR &kp RPAR ___       ___
    ___ &kp AMPS &kp UNDER &kp MINUS &kp MINUS &kp EQUAL  &kp CAPS  &kp LT  &kp LBKT &kp RBKT &kp GT    ___
    ___ &kp BSLH &kp DLLR  &kp PRCNT &kp CARET &caps_word ___       &kp SQT &kp LBRC &kp RBRC &kp SLASH ___  
    ___ ___      ___       &kp TAB   &kp SPACE ___        ___       ___     ___      ___      ___       ___     
)

ZMK_LAYER(nav_layer,
    ___ &kp F1     &kp F2         &kp F3       &kp F4     &kp F5    &kp F6   &kp HOME  &kp PG_DN &kp PG_UP &kp END   ___ 
    ___ &kp LCTRL  &kp LALT       &kp LCMD     &kp LSHFT  ___       ___      &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT ___
    ___ &kp C_PREV &kp C_VOL_DN   &kp C_VOL_UP &kp C_NEXT &kp C_PP  ___      BACK      ZOOM_OUT  ZOOM_IN   FORWARD   ___
    ___ ___        ___            &kp TAB      &kp SPACE  ___       ___      APPLE_FN  DICTATION ___       ___       ___
)

// U_UNDO U_CUT  U_COPY  U_PASTE   U_PASTE 
// F10 is mapped to centre pointer

ZMK_LAYER(ptr_layer,
    ___ ___       ___      ___      ___       ___  ___     U_WH_L  U_WH_D  U_WH_U  U_WH_R ___
    ___ &kp LCTRL &kp LALT &kp LCMD &kp LSHFT &kp F10      U_MS_B1 U_MS_L  U_MS_D  U_MS_U  U_MS_R ___
    ___ ___       ___      ___      ___       ___  ___     U_MS_B1 U_MS_B2 ___     ___    ___
    ___ ___       ___      ___      ___       ___  U_MS_B1 U_MS_B2 U_MS_B3 ___     ___    ___        
)
