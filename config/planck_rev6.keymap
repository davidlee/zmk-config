#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_48keys.h"
#include "mouse.dtsi"

/* layer IDs */ 

#define DEF 0  // layer shortcuts, must match order in which they are defined below
#define NUM 1
#define NAV 2
#define PTR_TEMP 3 
#define PTR_LOCK 4
#define PTR 5

#define QUICK_TAP_MS 175
#define TAPPING_TERM_MS 220
#define PRIOR_IDLE_MS 150

/* key aliases */

#define ___ &trans
   
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5 // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 // right-hand keys
#define THUMBS LH3 LH2 LH1 RH1 RH2 RH3      


ZMK_BEHAVIOR(hml, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;
    require-prior-idle-ms = <PRIOR_IDLE_MS>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;
)

ZMK_BEHAVIOR(hmr, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;
    require-prior-idle-ms = <PRIOR_IDLE_MS>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;
)    
   
ZMK_COMBO(combo_bs_word, &kp LA(BSPC), RM1 RM2, ALL)
ZMK_COMBO(combo_del, &kp DEL, RM3 RM4, ALL)
ZMK_COMBO(combo_esc, &kp ESC, LM3 LM4, ALL)
ZMK_COMBO(combo_ptr_lock, &tog PTR, RT2 RM1 RM3, ALL)

ZMK_CONDITIONAL_LAYER(PTR_LOCK, PTR)
ZMK_CONDITIONAL_LAYER(PTR_TEMP, PTR)

/* keycodes */

#define MEH LC(LA(LSHFT))

#define SFT_ENT &mt LSHFT ENTER
#define SFT_BSP &mt LSHFT BSPC

// TODO sticky shift on tap, caps word on double tap (mod morph?)
#define NAV_KEY &mo NAV 
#define SPC_NUM &lt NUM SPACE

#define ESC_MEH &mt MEH ESC
#define ESC_PTR &lt  PTR_TEMP ESC
#define PTR_LCK &tog PTR_LOCK

#define SQT_MEH &mt MEH SQT
#define CMD_TAB &mt LCMD TAB

#define ZOOM_IN  &kp LG(EQUAL)
#define ZOOM_OUT &kp LG(MINUS)
#define FORWARD  &kp LG(LBRC)
#define BACK     &kp LG(RBRC)

#undef UNDO
#undef CUT
#undef COPY
#undef PASTE
#define UNDO  &kp LG(Z)
#define CUT   &kp LG(X)
#define COPY  &kp LG(C)
#define PASTE &kp LG(V)

#define EMDASH &kp LA(MINUS)

#define HML_A &hml LCTRL A
#define HML_R &hml LALT  R
#define HML_S &hml LCMD  S
#define HML_T &hml LSHFT T

#define HMR_N &hmr LSHFT N
#define HMR_E &hmr LCMD  E
#define HMR_I &hmr LALT  I
#define HMR_O &hmr LCTRL O

/* karabiner tokens */
#define DICTATION &kp F21
#define APPLE_FN  &kp F24


ZMK_LAYER(default_layer,
    &kp GRAVE &kp Q &kp W &kp F   &kp P   &kp B   &kp J   &kp L   &kp U     &kp Y   &kp SEMI  &kp BSPC
    ESC_MEH   HML_A HML_R HML_S   HML_T   &kp G   &kp M   HMR_N   HMR_E     HMR_I   HMR_O     SQT_MEH
    &kp LSHFT &kp Z &kp X &kp C   &kp D   &kp V   &kp K   &kp H   &kp COMMA &kp DOT &kp SLASH SFT_ENT
    PTR_LCK   ___    ___  CMD_TAB SPC_NUM ESC_PTR NAV_KEY SFT_BSP &kp ENTER ___     ___       ___
)

ZMK_LAYER(num_layer,
    &kp TAB    &kp EXCL  &kp AT    &kp HASH &kp UNDER &kp LPAR  &kp RPAR  &kp N7  &kp N8  &kp N9 &kp COLON &kp AMPS
    &kp GT     &kp MINUS &kp EQUAL &kp LBKT &kp RBKT  &kp LBRC  &kp RBRC  &kp N4  &kp N5  &kp N6 &kp N0    &kp PLUS
    &caps_word &kp BSLH  &kp PRCNT &kp DLLR &kp STAR  &kp PIPE  &kp CARET &kp N1  &kp N2  &kp N3 &kp SLASH &kp ENTER
    ___        ___       ___       EMDASH   ___       &kp LT    &kp N0    ___     &kp DOT ___    ___       ___
)

ZMK_LAYER(nav_layer,
    &kp CAPS  &kp F1 &kp F2 &kp F3  &kp F4    &kp F5  &kp F6  &kp HOME &kp PG_DN &kp PG_UP &kp END   &kp C_PWR
    DICTATION &kp F7 &kp F8 &kp F9  &kp F10   &kp F11 &kp F12 &kp LEFT &kp DOWN  &kp UP    &kp RIGHT ___
    APPLE_FN  UNDO   CUT    COPY    PASTE     PASTE   ___     ___      ZOOM_OUT  ZOOM_IN   FORWARD   APPLE_FN
    ___       ___    ___    &kp TAB &kp SPACE ___     ___     APPLE_FN ___       ___       ___       ___
)

ZMK_LAYER(ptr_layer,
    ___     ___        ___          ___          ___        ___      ___     U_WH_L  U_WH_D  U_WH_U  U_WH_R ___
    PTR_LCK &kp LCTRL  &kp LALT     &kp LCMD     &kp LSHFT  ___      ___     U_MS_L  U_MS_D  U_MS_U  U_MS_R ___
    ___     &kp C_PREV &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT &kp C_PP ___     ___     ___     ___     ___    ___
    ___     ___        ___           ___         ___        ___      U_MS_B1 U_MS_B2 U_MS_B3 ___     ___    ___        
)
